    .data
raiz_msg1:    .asciz "R(1) = "
raiz_msg2:    .asciz "R(2) = "

plus:         .asciz " + "
minus:        .asciz " - "
i_suffix:     .asciz " i\n"
newline:      .asciz "\n"
error_msg:    .asciz "Erro! Não é equação do segundo grau!\n"

.text
Main:
	addi    sp, sp, -8
	mv      a1, sp
	#recebe a
	li	a7,6
	ecall
	#salva a em intermediario
	fmv.s	ft0,fa0
	#recebe b
	li	a7,6
	ecall
	fmv.s	fa1,fa0
	#recebe c
	li	a7,6
	ecall
	fmv.s	fa2,fa0
	#retorna a para fta0
	fmv.s	fa0,ft0

    	jal     baskara
    	mv      a1, sp
    	jal     show

	addi    sp, sp, 8
    	j	Main
	#li	a7,10
	#ecall
baskara:
    addi    sp, sp, -16
    sw      ra, 12(sp)

    # prepara constante 0.0 em ft0
    li      t2, 0
    fcvt.s.w ft0, t2       # ft0 = 0.0

    # verifica a == 0.0
    feq.s   t0, fa0, ft0
    bnez    t0, error

    # discriminante h = b^2 - 4ac
    fmul.s  ft1, fa1, fa1
    li      t1, 4
    fcvt.s.w ft2, t1
    fmul.s  ft2, ft2, fa0
    fmul.s  ft2, ft2, fa2
    fsub.s  ft3, ft1, ft2

    # decide casos usando ft0 como 0.0
    flt.s   t0, ft3, ft0    # h < 0 ?
    bnez    t0, complex_roots
    feq.s   t0, ft3, ft0    # h == 0 ?
    bnez    t0, single_root
    # caso h > 0
    j       real_roots

real_roots:
    fsqrt.s ft4, ft3
    fneg.s  ft5, fa1
    fadd.s  ft6, ft5, ft4
    fsub.s  ft7, ft5, ft4

    li      t1, 2
    fcvt.s.w ft2, t1
    fmul.s  ft2, ft2, fa0
    fdiv.s  ft6, ft6, ft2
    fdiv.s  ft7, ft7, ft2

    # Normalizar ft6 e ft7
    fmv.s   ft0, ft6
    jal     normalize_zero
    fmv.s   ft6, ft0

    fmv.s   ft0, ft7
    jal     normalize_zero
    fmv.s   ft7, ft0

    fsw     ft6, 0(a1)
    fsw     ft7, 4(a1)

    li      a0, 1
    j       end_baskara

single_root:
    fneg.s  ft5, fa1         # ft5 = -b
    li      t1, 2
    fcvt.s.w ft2, t1         # ft2 = 2.0
    fmul.s  ft2, ft2, fa0    # ft2 = 2a
    fdiv.s  ft5, ft5, ft2    # ft5 = (-b)/(2a)
    
    # Normalizar ft5
    fmv.s   ft0, ft5
    jal     normalize_zero
    fmv.s   ft5, ft0
    
    fsw     ft5, 0(a1)
    fsw     ft5, 4(a1)
    li      a0, 1
    j       end_baskara


complex_roots:
    fneg.s  ft4, fa1
    li      t1, 2
    fcvt.s.w ft2, t1
    fmul.s  ft2, ft2, fa0
    fdiv.s  ft5, ft4, ft2

    fneg.s  ft6, ft3
    fsqrt.s ft6, ft6
    fdiv.s  ft6, ft6, ft2
    
        # Normalizar ft6 e ft7
    fmv.s   ft0, ft5
    jal     normalize_zero
    fmv.s   ft5, ft0

    fmv.s   ft0, ft6
    jal     normalize_zero
    fmv.s   ft6, ft0
    
    fmv.s   ft0, ft7
    jal     normalize_zero
    fmv.s   ft7, ft0
    

    fsw     ft5, 0(a1)
    fsw     ft6, 4(a1)
    fsw     ft5, 8(a1)
    fneg.s  ft7, ft6
    fsw     ft7,12(a1)
    li      a0, 2
    j       end_baskara

error:
    li      a0, 0

end_baskara:
    lw      ra, 12(sp)
    addi    sp, sp, 16
    ret

show:
    addi    sp, sp, -16
    sw      ra, 12(sp)
    sw      s0, 8(sp)
    mv      s0, a0

    beqz    s0, error_out
    li      t0, 1
    beq     s0, t0, show_real
    li      t0, 2
    beq     s0, t0, show_complex
    j       end_show

show_real:
    flw     fa0, 0(a1)
    flw     fa1, 4(a1)
    la      a0, raiz_msg1
    li      a7, 4
    ecall
    fmv.s   fa0, fa0
    li      a7, 2
    ecall
    la      a0, newline
    li a7,4
    ecall
    la      a0, raiz_msg2
    li a7,4
    ecall
    fmv.s   fa0, fa1
    li a7,2
    ecall
    la      a0, newline
    li a7,4
    ecall
    j       end_show

show_complex:
    # Carrega os valores dos n�meros complexos do endere�o em a1
    flw     fa0, 0(a1)     # parte real de x1
    flw     fa1, 4(a1)     # parte imagin�ria de x1
    flw     fa2, 8(a1)     # parte real de x2
    flw     fa3,12(a1)     # parte imagin�ria de x2

    # Exibe: x1 = (parte real) + (parte imagin�ria)i
    la      a0, raiz_msg1
    li      a7, 4
    ecall

    fmv.s   fa0, fa0       # parte real de x1
    li      a7, 2
    ecall

    la      a0, plus       # s�mbolo +
    li      a7, 4
    ecall

    fabs.s  fa1, fa1       # m�dulo da parte imagin�ria
    fmv.s   fa0, fa1
    li      a7, 2
    ecall

    la      a0, i_suffix   # sufixo 'i'
    li      a7, 4
    ecall

    # Exibe: x2 = (parte real) - (parte imagin�ria)i
    la      a0, raiz_msg2
    li      a7, 4
    ecall

    fmv.s   fa0, fa2       # parte real de x2
    li      a7, 2
    ecall

    la      a0, minus      # s�mbolo -
    li      a7, 4
    ecall

    fabs.s  fa3, fa3       # m�dulo da parte imagin�ria
    fmv.s   fa0, fa3
    li      a7, 2
    ecall

    la      a0, i_suffix   # sufixo 'i'
    li      a7, 4
    ecall

    j       end_show       # pular para finaliza��o

error_out:
    la      a0, error_msg
    li a7,4
    ecall

end_show:
    lw      ra, 12(sp)
    lw      s0, 8(sp)
    addi    sp, sp, 16
    ret
normalize_zero:
    li      t1, 0
    fcvt.s.w ft1, t1         # ft1 = 0.0
    feq.s   t0, ft0, ft1
    bnez    t0, set_clean_zero
    ret
set_clean_zero:
    fmv.s   ft0, ft1
    ret
